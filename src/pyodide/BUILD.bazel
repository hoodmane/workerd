load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@workerd//:build/wd_js_bundle.bzl", "wd_js_bundle")

copy_file(
    name = "pyodide.asm.wasm@rule",
    src = "@pyodide//:pyodide/pyodide.asm.wasm",
    out = "generated/pyodide.asm.wasm",
)

copy_file(
    name = "python_stdlib.zip@rule",
    src = "@pyodide//:pyodide/python_stdlib.zip",
    out = "generated/python_stdlib.zip",
)

copy_file(
    name = "pyodide-lock.json@rule",
    src = "@pyodide//:pyodide/pyodide-lock.json",
    out = "generated/pyodide-lock.json",
)

PRELUDE = """
import { newWasmModule, monotonicDateNow, wasmInstantiate } from "pyodide-internal:builtin_wrappers";

function addEventListener(){}
"""

REPLACEMENTS = [
    ["var _createPyodideModule", PRELUDE + "export const _createPyodideModule"],
    ["globalThis._createPyodideModule = _createPyodideModule;", ""],
    ["new WebAssembly.Module", "newWasmModule"],
    ["WebAssembly.instantiate", "wasmInstantiate"],
    ["Date.now", "monotonicDateNow"],
]

expand_template(
    name = "pyodide.asm.js@rule",
    out = "generated/pyodide.asm.js",
    template = "@pyodide//:pyodide/pyodide.asm.js",
    substitutions = dict(REPLACEMENTS),
)

wd_js_bundle(
    name = "pyodide",
    builtin_modules = glob(
        [
            "*.js",
        ],
    ),
    import_name = "pyodide",
    internal_data_modules = [
        "generated/python_stdlib.zip",
        # pyodide-lock really ought to be an internal_text_module...
        "generated/pyodide-lock.json",
    ],
    internal_modules = [
        "generated/pyodide.asm.js",
    ] + glob([
        "internal/*.js",
    ]),
    internal_wasm_modules = ["generated/pyodide.asm.wasm"],
    schema_id = "0xbcc8f57c63814005",
    deps = [
        "pyodide.asm.js@rule",
        "pyodide.asm.wasm@rule",
        "python_stdlib.zip@rule",
        "pyodide-lock.json@rule",
    ],
)
